// Copyright (c) 2016, the Dogma Project Authors.
// Please see the AUTHORS file for details. All rights reserved.
// Use of this source code is governed by a zlib license that can be found in
// the LICENSE file.

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_source_analyzer/metadata.dart';
import 'package:dogma_source_analyzer/path.dart' as p;
import 'package:meta/meta.dart';

import '../../codegen.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// Generates the header of a library.
abstract class LibraryHeaderGenerationStep {
  //---------------------------------------------------------------------
  // Class variables
  //---------------------------------------------------------------------

  /// The generated header.
  ///
  /// This is used to determine if a file was generated by Dogma Codegen.
  static const String _generated = '// Generated by Dogma Codegen. DO NOT MODIFY!';

  //---------------------------------------------------------------------
  // Properties
  //---------------------------------------------------------------------

  /// Whether the library name should be outputted.
  ///
  /// Outputting the library name is not needed unless there is associated
  /// metadata for the library. If set to `true` then the library name will
  /// always be generated, otherwise it will only be generated if there are
  /// annotations or comments for the library.
  bool get outputLibraryName;
  /// The copyright information to add to the header.
  String get copyright;

  //---------------------------------------------------------------------
  // Protected methods
  //---------------------------------------------------------------------

  /// Writes the header for the given [metadata] into the [buffer].
  @protected
  void generateHeader(LibraryMetadata metadata, StringBuffer buffer) {
    // Write the generated header
    _writeGeneratedHeader(buffer);

    // Write the copyright if present
    if (copyright.isNotEmpty) {
      buffer.writeln(copyright);
    }

    // Write the imports
    for (var imported in metadata.imports) {
      generateUriReference(imported, metadata.uri, 'import', buffer);
    }

    // Write the exports
    for (var exported in metadata.exports) {
      generateUriReference(exported, metadata.uri, 'export', buffer);
    }
  }

  /// Writes the generated header into the [buffer].
  ///
  /// This announces that the file was generated by Dogma and contains the
  /// timestamp for the generation.
  static void _writeGeneratedHeader(StringBuffer buffer) {
    buffer.writeln(_generated);
    buffer.writeln('// Generated at ${new DateTime.now().toIso8601String()}\n');
  }
}
