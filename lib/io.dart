// Copyright (c) 2015, the Dogma Project Authors.
// Please see the AUTHORS file for details. All rights reserved.
// Use of this source code is governed by a zlib license that can be found in
// the LICENSE file.

/// Utility functions for file I/O when generating files.
library dogma_codegen.io;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:async';
import 'dart:io';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

import 'package:path/path.dart' as p;
import 'package:dogma_codegen/template.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// Creates a directory at the given [path].
///
/// The function determines if the directory is present on the disk and if not
/// goes through the process of creating it.
Future<Null> createDirectory(String path) async {
  var directory = new Directory(path);

  if (!await directory.exists()) {
    await directory.create(recursive: true);
  }
}

/// Determines whether the file was generated by the codegen library.
Future<bool> isGeneratedFile(Uri uri)
    => _isGeneratedFile(_getFile(uri));

/// Determines whether a file can be generated at the [uri].
Future<bool> canGenerateFileAt(Uri uri) async {
  var file = _getFile(uri);

  return await file.exists()
      ? _isGeneratedFile(file)
      : true;
}

File _getFile(Uri uri) {
  var path = p.posix.fromUri(uri);

  return new File(path);
}

Future<bool> _isGeneratedFile(File file) async {
  var lines = await file.readAsLines();

  return isGeneratedSource(lines);
}
